@page "/"
@using BlazorServer.Security
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject NavigationManager NavManager
@implements IAsyncDisposable

<style>
    .user-container {
        border: 1px solid #ccc;
        padding: 5px;
        margin-bottom: 5px;
        cursor: pointer;
    }

    .user-container:hover {
        background-color: #f0f0f0;
    }

    .user-container.selected {
        background-color: #e0e0e0;
    }

    .user-item {
        cursor: pointer;
    }
</style>

<div class="form-group">
    <h4>You are: @currentUsername</h4>
    <h4>You chat with: @selectedUserId</h4>
</div>
<br />

<div class="form-group">
    <h4>Connected Users:</h4>
</div>
<br />

@foreach (var userWithId in connectedUsers)
{
    @if(userWithId.Value != currentUsername)
    {   
        <div @onclick="() => HandleSelection(userWithId.Value, userWithId.Key)" class="user-container">
            <label class="user-item">@userWithId.Value</label>
        </div>
    }
}

<div class="form-group">
    <label for="messageInput">Message:</label>
    <input id="messageInput" @bind="messageInput" class="form-control" />
</div>
<br />

<button class="btn btn-primary" @onclick="SendPrivate" disabled="@(selectedConnectionId is null)">Send</button>

<br />
<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection? hubConnection;

    // messages
    private List<string> messages = new();
    private string? messageInput;

    // users
    private Dictionary<string, string> connectedUsers = new();
    private string currentUsername; 
    private string selectedConnectionId;
    private string selectedUserId;

    // encryption
    private DiffieHellmanKeyExchange diffieHellmanKeyExchange;
    private byte[] otherPublicKey;
    private byte[] otherIV;

    protected override async Task OnInitializedAsync()
    {
        diffieHellmanKeyExchange = new DiffieHellmanKeyExchange();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Dictionary<string, string>>("CCCC", async users =>
        {
            connectedUsers = users;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("ReceiveUsername", async username =>
        {
            currentUsername = username; 
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, byte[], byte[]>("BBBB", async (user, secretMessage, IV) =>
        {
            otherIV = IV; 

            var RawMessage = $"{user}: RAW message: {Convert.ToBase64String(secretMessage)}";
            messages.Add(RawMessage);

            var decryptedMessage = diffieHellmanKeyExchange.Decrypt(otherPublicKey, secretMessage, IV);
            var formattedMessage = $"{user}: {decryptedMessage}";
            messages.Add(formattedMessage);

             
            await InvokeAsync(StateHasChanged);

        });

        hubConnection.On<byte[]>("RequestPublicKey", async (publicKey) =>
        {
            otherPublicKey = publicKey; 
            await InvokeAsync(StateHasChanged);
        });
         

        await hubConnection.StartAsync(); 
        await hubConnection.SendAsync("SendPublicKey", diffieHellmanKeyExchange.PublicKey);
    }


    private async Task SendPrivate()
    {
        if (hubConnection is not null)
        {
            byte[] secretMessage = diffieHellmanKeyExchange.Encrypt(otherPublicKey, messageInput);
            byte[] IV = diffieHellmanKeyExchange.IV; 
             
            await hubConnection.SendAsync("SendMessagePrivate_ChatHubFunction", selectedConnectionId, selectedUserId, secretMessage, IV);
            messageInput = string.Empty; 
        }
        await InvokeAsync(StateHasChanged);

    }
    private async Task HandleSelection(string userId, string connectionId)
    {
        selectedUserId = userId;
        selectedConnectionId = connectionId;
          
        await hubConnection.InvokeAsync("RequestPublicKey", selectedConnectionId);

    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
